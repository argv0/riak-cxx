// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RpbErrorResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbErrorResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetServerInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetServerInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPair_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_riak_2eproto() {
  protobuf_AddDesc_riak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riak.proto");
  GOOGLE_CHECK(file != NULL);
  RpbErrorResp_descriptor_ = file->message_type(0);
  static const int RpbErrorResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errcode_),
  };
  RpbErrorResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbErrorResp_descriptor_,
      RpbErrorResp::default_instance_,
      RpbErrorResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbErrorResp));
  RpbGetServerInfoResp_descriptor_ = file->message_type(1);
  static const int RpbGetServerInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, server_version_),
  };
  RpbGetServerInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetServerInfoResp_descriptor_,
      RpbGetServerInfoResp::default_instance_,
      RpbGetServerInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetServerInfoResp));
  RpbPair_descriptor_ = file->message_type(2);
  static const int RpbPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, value_),
  };
  RpbPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPair_descriptor_,
      RpbPair::default_instance_,
      RpbPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPair));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbErrorResp_descriptor_, &RpbErrorResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetServerInfoResp_descriptor_, &RpbGetServerInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPair_descriptor_, &RpbPair::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riak_2eproto() {
  delete RpbErrorResp::default_instance_;
  delete RpbErrorResp_reflection_;
  delete RpbGetServerInfoResp::default_instance_;
  delete RpbGetServerInfoResp_reflection_;
  delete RpbPair::default_instance_;
  delete RpbPair_reflection_;
}

void protobuf_AddDesc_riak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nriak.proto\"/\n\014RpbErrorResp\022\016\n\006errmsg\030\001"
    " \002(\014\022\017\n\007errcode\030\002 \002(\r\"<\n\024RpbGetServerInf"
    "oResp\022\014\n\004node\030\001 \001(\014\022\026\n\016server_version\030\002 "
    "\001(\014\"%\n\007RpbPair\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \001"
    "(\014", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riak.proto", &protobuf_RegisterTypes);
  RpbErrorResp::default_instance_ = new RpbErrorResp();
  RpbGetServerInfoResp::default_instance_ = new RpbGetServerInfoResp();
  RpbPair::default_instance_ = new RpbPair();
  RpbErrorResp::default_instance_->InitAsDefaultInstance();
  RpbGetServerInfoResp::default_instance_->InitAsDefaultInstance();
  RpbPair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riak_2eproto {
  StaticDescriptorInitializer_riak_2eproto() {
    protobuf_AddDesc_riak_2eproto();
  }
} static_descriptor_initializer_riak_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RpbErrorResp::kErrmsgFieldNumber;
const int RpbErrorResp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

RpbErrorResp::RpbErrorResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbErrorResp::InitAsDefaultInstance() {
}

RpbErrorResp::RpbErrorResp(const RpbErrorResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbErrorResp::SharedCtor() {
  _cached_size_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbErrorResp::~RpbErrorResp() {
  SharedDtor();
}

void RpbErrorResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void RpbErrorResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbErrorResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbErrorResp_descriptor_;
}

const RpbErrorResp& RpbErrorResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();  return *default_instance_;
}

RpbErrorResp* RpbErrorResp::default_instance_ = NULL;

RpbErrorResp* RpbErrorResp::New() const {
  return new RpbErrorResp;
}

void RpbErrorResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbErrorResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes errmsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }
      
      // required uint32 errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbErrorResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes errmsg = 1;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->errmsg(), output);
  }
  
  // required uint32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbErrorResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes errmsg = 1;
  if (has_errmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->errmsg(), target);
  }
  
  // required uint32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbErrorResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes errmsg = 1;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errmsg());
    }
    
    // required uint32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbErrorResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbErrorResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbErrorResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbErrorResp::MergeFrom(const RpbErrorResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbErrorResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbErrorResp::CopyFrom(const RpbErrorResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbErrorResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpbErrorResp::Swap(RpbErrorResp* other) {
  if (other != this) {
    std::swap(errmsg_, other->errmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbErrorResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbErrorResp_descriptor_;
  metadata.reflection = RpbErrorResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetServerInfoResp::kNodeFieldNumber;
const int RpbGetServerInfoResp::kServerVersionFieldNumber;
#endif  // !_MSC_VER

RpbGetServerInfoResp::RpbGetServerInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetServerInfoResp::InitAsDefaultInstance() {
}

RpbGetServerInfoResp::RpbGetServerInfoResp(const RpbGetServerInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetServerInfoResp::SharedCtor() {
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetServerInfoResp::~RpbGetServerInfoResp() {
  SharedDtor();
}

void RpbGetServerInfoResp::SharedDtor() {
  if (node_ != &::google::protobuf::internal::kEmptyString) {
    delete node_;
  }
  if (server_version_ != &::google::protobuf::internal::kEmptyString) {
    delete server_version_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetServerInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetServerInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetServerInfoResp_descriptor_;
}

const RpbGetServerInfoResp& RpbGetServerInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();  return *default_instance_;
}

RpbGetServerInfoResp* RpbGetServerInfoResp::default_instance_ = NULL;

RpbGetServerInfoResp* RpbGetServerInfoResp::New() const {
  return new RpbGetServerInfoResp;
}

void RpbGetServerInfoResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::kEmptyString) {
        node_->clear();
      }
    }
    if (has_server_version()) {
      if (server_version_ != &::google::protobuf::internal::kEmptyString) {
        server_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetServerInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_version;
        break;
      }
      
      // optional bytes server_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetServerInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node(), output);
  }
  
  // optional bytes server_version = 2;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->server_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetServerInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes node = 1;
  if (has_node()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node(), target);
  }
  
  // optional bytes server_version = 2;
  if (has_server_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetServerInfoResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }
    
    // optional bytes server_version = 2;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetServerInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetServerInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetServerInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetServerInfoResp::MergeFrom(const RpbGetServerInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetServerInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetServerInfoResp::CopyFrom(const RpbGetServerInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetServerInfoResp::IsInitialized() const {
  
  return true;
}

void RpbGetServerInfoResp::Swap(RpbGetServerInfoResp* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(server_version_, other->server_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetServerInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetServerInfoResp_descriptor_;
  metadata.reflection = RpbGetServerInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPair::kKeyFieldNumber;
const int RpbPair::kValueFieldNumber;
#endif  // !_MSC_VER

RpbPair::RpbPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbPair::InitAsDefaultInstance() {
}

RpbPair::RpbPair(const RpbPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPair::~RpbPair() {
  SharedDtor();
}

void RpbPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RpbPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPair_descriptor_;
}

const RpbPair& RpbPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();  return *default_instance_;
}

RpbPair* RpbPair::default_instance_ = NULL;

RpbPair* RpbPair::New() const {
  return new RpbPair;
}

void RpbPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }
  
  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }
  
  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPair::MergeFrom(const RpbPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPair::CopyFrom(const RpbPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbPair::Swap(RpbPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPair_descriptor_;
  metadata.reflection = RpbPair_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
